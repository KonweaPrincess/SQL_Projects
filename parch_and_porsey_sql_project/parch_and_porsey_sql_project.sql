/*
Select all the columns in the orders table
*/
SELECT * FROM orders;

/*
Limits returns a limited number of rows if you need to scan through a few number of rows returned. 
*/
/*
Display all the data in the occurred_at, account_id, and channel columns of the web_events table,
and limits the output to only the first 15 rows.
*/
SELECT occurred_at, account_id, channel
FROM web_events
LIMIT 15;

/*what is the average order value for each region*/

SELECT r.name, round(AVG(total_amt_usd), 2) AS avg_of_values 
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
JOIN orders o
ON a.id = o.account_id
GROUP BY r.name


/*at which month of the year does the HP make the highest sales*/

--month of the yera, highest revebue
SELECT a.name, date_trunc('month', o.occurred_at) AS month, sum(o.total_amt_usd) AS revenue
FROM orders o
JOIN accounts a
ON a.id = o.account_id
JOIN web_events w
ON a.id = w.account_id
WHERE a.name = 'HP'
GROUP BY date_trunc('month', o.occurred_at), a.name
ORDER BY revenue DESC
LIMIT 1

/*at which product does the customers order the most*/ 
SELECT o.standard_qty, o.gloss_qty, o.poster_qty, count(o.total) as most_order
FROM orders o 
GROUP BY COUNT(o.total)

/*
Write a query to return the 10 recent orders in the orders table. Include the id, occurred_at, and total_amt_usd.
*/
SELECT id, occurred_at, total_amt_usd 
FROM orders
ORDER BY occurred_at DESC
LIMIT 10;

/*
Write a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd.
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd desc
LIMIT 5;

/*
Write a query to return the lowest 20 orders in terms of smallest total_amt_usd. Include the id, account_id, and total_amt_usd.
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd asc
LIMIT 20;

/*
Write a query that displays the order ID, account ID, and total dollar amount for all the orders,
sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order).
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY account_id, total_amt_usd desc;

/* 
Now write a query that again displays order ID, account ID, and total dollar amount for each order, 
but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order).
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC, account_id;

/*
Pull the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than 
or equal to 1000.
*/
SELECT * 
FROM orders
WHERE gloss_amt_usd >= 1000
LIMIT 5;

/*
Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.
*/
SELECT * 
FROM orders
WHERE total_amt_usd <= 500
LIMIT 10;

/* Where with non-numeric (strings)*/
/*Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) 
just for the Exxon Mobil company in the accounts table.*/
SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil';

/*
accounts name that starts with the alphabet 'E'
*/
SELECT name, website, primary_poc
FROM accounts
WHERE name LIKE 'E%';

/*
Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. 
Limit the results to the first 10 orders, and include the id and account_id fields.
*/

SELECT id, account_id, standard_amt_usd / standard_qty as unit_price
FROM orders
LIMIT 10;

--rounds to the nearest whole number
SELECT id, account_id, round(standard_amt_usd / standard_qty) as unit_price
FROM orders
LIMIT 10;

/*
All the companies whose names start with 'C'
*/
SELECT * FROM accounts
WHERE name LIKE 'C%'

/*
All companies whose names contain the string 'one' somewhere in the name.
*/
SELECT * FROM accounts
WHERE name LIKE '%one%'

/*All companies whose names end with 's'.*/
SELECT * FROM accounts
WHERE name LIKE '%s'

/*
Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.
*/
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

/*
Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.
*/
SELECT *
FROM web_events
WHERE channel = 'organic' OR channel = 'adwords';

/*
retrieve the total revenue for each sales rep
*/
SELECT s.name, SUM(o.total_amt_usd) AS revenue
FROM sales_reps s
JOIN accounts a 
ON s.id = a.sales_rep_id
JOIN orders o 
ON a.id = o.account_id
GROUP BY s.name;

/*
retrieve the total revenue generated by each channel
*/
SELECT w.channel, SUM(o.total_amt_usd) AS revenue
FROM web_events w
JOIN accounts a 
ON w.id = a.id
JOIN orders o 
ON a.id = o.account_id
GROUP BY w.channel
ORDER BY revenue DESC;


/* find the region that has the highest total revenue*/
select * from region
select * from orders
select * from accounts
select * from sales_reps

/*region with the most revenue*/
SELECT r.name, s.region_id, sum(o.total_amt_usd) as revenue
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN orders o
ON a.id = account_id
GROUP BY r.name, s.region_id
ORDER BY revenue desc
LIMIT 1;

/*Average order value for each product type*/
SELECT round(AVG(standard_amt_usd), 2) AS standard, round(AVG(gloss_amt_usd), 2) AS gloss, 
round(AVG(poster_amt_usd), 2) AS poster
FROM orders

/*what is the (average number) of (web events per account*/
SELECT CEIL(AVG(count_of_webevents)) AS avg_no_of_events
FROM (SELECT account_id, COUNT(*) AS count_of_webevents
FROM web_events 
GROUP BY account_id) avg_number

/*which account has the highest total revenue*/
SELECT a.name, sum(o.total_amt_usd) AS revenue
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name
ORDER BY revenue DESC
LIMIT 1;

/*
Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total)
for the order. Your final table should have 3 columns: region name, account name, and unit price. 
A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.
region name*/

SELECT r.name, a.name, o.total_amt_usd/ (o.total + 0.01) AS unit_price
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
JOIN orders o
JOIN a.id = o.account_id


/* Ceil*/
SELECT CEILING (25.75) AS Ceilvalue
SELECT CEILING (25) AS Ceilvalue
SELECT CEILING (-13.5) AS Ceilvalue

/*what is the average number of web events per account*/
SELECT (AVG(count_of_webevents)) as avg_no_of_events
FROM (	
SELECT account_id, COUNT(*) AS count_of_webevents
FROM web_events 
GROUP BY account_id) subquery
--where account_id = 1001
--group by account_id
SELECT CEIL(AVG(count_of_webevents)) AS avg_no_of_events
FROM (
SELECT account_id, COUNT(*) AS count_of_webevents
FROM web_events 
GROUP BY account_id) subquery
subquery

/*
On which day-channel pair did the most events occur.*/


/*CTE*/
with princess AS (SELECT account_id, COUNT(*) AS count_of_webevents
FROM web_events 
GROUP BY account_id) SELECT CEIL(AVG(count_of_webevents)) AS avg_no_of_events
FROM princess

/*views: comes in handy when you frequently write a specific query*/

CREATE VIEW princy AS (SELECT CEIL(AVG(count_of_webevents)) AS avg_no_of_events
FROM (
SELECT account_id, COUNT(*) AS count_of_webevents
FROM web_events 
GROUP BY account_id) subquery)

SELECT * FROM princy
subquery

/*in the year 2016, which channel generated the most revenue?*/

SELECT w.channel, SUM(o.total_amt_usd) AS revenue
FROM web_events w
JOIN accounts a ON w.account_id = a.id
JOIN orders o ON a.id = o.account_id
WHERE EXTRACT(year FROM w.occurred_at) = 2016
GROUP BY w.channel
ORDER BY revenue DESC
LIMIT 1;

/*what is the average order value for each region*/

SELECT r.name, round(AVG(total_amt_usd), 2) AS avg_of_values 
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
JOIN orders o
ON a.id = o.account_id
GROUP BY r.name


/*at which month of the year does the HP make the highest sales*/

--month of the year, highest revenue
SELECT a.name, date_trunc('month', o.occurred_at) as month, SUM(o.total_amt_usd) AS revenue
FROM orders o
JOIN accounts a
ON a.id = o.account_id
JOIN web_events w
ON a.id = w.account_id
WHERE a.name = 'HP'
GROUP BY date_trunc('month', o.occurred_at), a.name
ORDER BY revenue DESC
LIMIT 1

/*at which product does the customers order the most*/ 
SELECT o.standard_qty, o.gloss_qty, o.poster_qty, COUNT(o.total) AS most_order
FROM orders o 
GROUP BY COUNT(o.total)